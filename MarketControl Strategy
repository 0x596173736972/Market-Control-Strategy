//@version=6
strategy('MarketControl Strategy', shorttitle = 'MarketControl', overlay = true)

// ================ PARAMÈTRES DE L'INDICATEUR ================
lookbackPeriod = input.int(2, 'Période d\'analyse', minval = 1, maxval = 50, group = 'Indicateur')
volumeWeight = input.float(2.5, 'Importance du volume', minval = 0.0, maxval = 10.0, step = 0.1, group = 'Indicateur')
bodySizeWeight = input.float(2, 'Importance taille du corps', minval = 0.0, maxval = 10.0, step = 0.1, group = 'Indicateur')
wickWeight = input.float(0.8, 'Importance des mèches', minval = 0.0, maxval = 10.0, step = 0.1, group = 'Indicateur')
closePosWeight = input.float(2, 'Importance position de clôture', minval = 0.0, maxval = 10.0, step = 0.1, group = 'Indicateur')

// ================ PARAMÈTRES DE TRADING ================
startHour = input.int(8, 'Heure de début (UTC+3)', minval = 0, maxval = 23, group = 'Filtres Temporels')
endHour = input.int(18, 'Heure de fin (UTC+3)', minval = 0, maxval = 23, group = 'Filtres Temporels')
timeFrameFilter = input.bool(true, 'Activer filtre horaire', group = 'Filtres Temporels')

swingPeriod = input.int(5, 'Période pour Swing High/Low', minval = 2, maxval = 50, group = 'Gestion des Risques')
tpRatio = input.float(1.5, 'Ratio TP/SL', minval = 0.5, step = 0.1, group = 'Gestion des Risques')

// ================ NOUVEAU - PARAMÈTRES DU FILTRE DE TENDANCE ================
maPeriod = input.int(50, 'Période de la Moyenne Mobile', minval = 5, maxval = 200, group = 'Filtre de Tendance')
slopePeriod = input.int(14, 'Période de calcul de pente', minval = 5, maxval = 50, group = 'Filtre de Tendance')
minAbsSlope = input.float(0.15, 'Pente minimale (%)', minval = 0.005, maxval = 1.0, step = 0.001, group = 'Filtre de Tendance')
useMAFilter = input.bool(true, 'Activer le filtre de pente', group = 'Filtre de Tendance')
useMACrossFilter = input.bool(true, 'Activer le filtre de position prix/MA', group = 'Filtre de Tendance')

// ================ CALCULS INDICATEUR ================
// ----- Fonctions de calcul du score -----
calcBullishScore(idx) =>
    bodySize = close[idx] - open[idx]
    totalSize = high[idx] - low[idx]
    bodyPercent = bodySize / totalSize
    upperWick = high[idx] - math.max(open[idx], close[idx])
    lowerWick = math.min(open[idx], close[idx]) - low[idx]
    wickRatio = lowerWick > 0 ? upperWick / lowerWick : 10
    closePosition = (close[idx] - low[idx]) / totalSize

    // Score basé sur les caractéristiques de la bougie
    bodyScore = bodySize > 0 ? bodySize / syminfo.mintick * bodySizeWeight : 0
    wickScore = lowerWick < upperWick * 0.5 ? wickWeight : 0
    closeScore = closePosition > 0.7 ? closePosWeight : 0

    // Prise en compte du volume si disponible
    volScore = 0.0
    if bool(volume)
        volRatio = volume[idx] / ta.sma(volume, 20)
        volScore := bodySize > 0 and volRatio > 1 ? volRatio * volumeWeight : 0
        volScore

    bodyScore + wickScore + closeScore + volScore

calcBearishScore(idx) =>
    bodySize = open[idx] - close[idx]
    totalSize = high[idx] - low[idx]
    bodyPercent = bodySize / totalSize
    upperWick = high[idx] - math.max(open[idx], close[idx])
    lowerWick = math.min(open[idx], close[idx]) - low[idx]
    wickRatio = upperWick > 0 ? lowerWick / upperWick : 10
    closePosition = (high[idx] - close[idx]) / totalSize

    // Score basé sur les caractéristiques de la bougie
    bodyScore = bodySize > 0 ? bodySize / syminfo.mintick * bodySizeWeight : 0
    wickScore = upperWick < lowerWick * 0.5 ? wickWeight : 0
    closeScore = closePosition > 0.7 ? closePosWeight : 0

    // Prise en compte du volume si disponible
    volScore = 0.0
    if bool(volume)
        volRatio = volume[idx] / ta.sma(volume, 20)
        volScore := bodySize > 0 and volRatio > 1 ? volRatio * volumeWeight : 0
        volScore

    bodyScore + wickScore + closeScore + volScore

// ----- Détection des formations spécifiques -----
isThreeWhiteSoldiers() =>
    bull1 = close[2] > open[2]
    bull2 = close[1] > open[1]
    bull3 = close[0] > open[0]
    higherClose = close[0] > close[1] and close[1] > close[2]
    higherOpen = open[0] > open[1] and open[1] > open[2]
    goodBodies = close[0] - open[0] > (high[0] - low[0]) * 0.6 and close[1] - open[1] > (high[1] - low[1]) * 0.6 and close[2] - open[2] > (high[2] - low[2]) * 0.6

    bull1 and bull2 and bull3 and higherClose and goodBodies

isThreeBlackCrows() =>
    bear1 = close[2] < open[2]
    bear2 = close[1] < open[1]
    bear3 = close[0] < open[0]
    lowerClose = close[0] < close[1] and close[1] < close[2]
    lowerOpen = open[0] < open[1] and open[1] < open[2]
    goodBodies = open[0] - close[0] > (high[0] - low[0]) * 0.6 and open[1] - close[1] > (high[1] - low[1]) * 0.6 and open[2] - close[2] > (high[2] - low[2]) * 0.6

    bear1 and bear2 and bear3 and lowerClose and goodBodies

isEngulfing() =>
    bull = close[0] > open[0] and close[1] < open[1] and close[0] > open[1] and open[0] < close[1]
    bear = close[0] < open[0] and close[1] > open[1] and close[0] < close[1] and open[0] > open[1]

    [bull, bear]

isHammer() =>
    bull = high[0] - math.max(open[0], close[0]) < (math.min(open[0], close[0]) - low[0]) * 0.3 and math.min(open[0], close[0]) - low[0] > (high[0] - low[0]) * 0.6
    bear = math.min(open[0], close[0]) - low[0] < (high[0] - math.max(open[0], close[0])) * 0.3 and high[0] - math.max(open[0], close[0]) > (high[0] - low[0]) * 0.6

    [bull, bear]

isDoji() =>
    math.abs(close - open) <= (high - low) * 0.1

// ================ CALCUL DES SCORES ================
// Scores totaux
var float bullScore = 0
var float bearScore = 0

// Calculs périodiques
bullScoreTemp = 0.0
bearScoreTemp = 0.0

for i = 0 to lookbackPeriod - 1 by 1
    bullScoreTemp := bullScoreTemp + calcBullishScore(i)
    bearScoreTemp := bearScoreTemp + calcBearishScore(i)
    bearScoreTemp

// ================ DÉTECTION DE FORMATIONS ================
[bullEngulf, bearEngulf] = isEngulfing()
[bullHammer, bearHammer] = isHammer()
threeSoldiers = isThreeWhiteSoldiers()
threeCrows = isThreeBlackCrows()
doji = isDoji()

// Bonus pour les formations spécifiques
formationBonus = 0

if threeSoldiers
    bullScoreTemp := bullScoreTemp * 1.5
    formationBonus := 10
    formationBonus
if threeCrows
    bearScoreTemp := bearScoreTemp * 1.5
    formationBonus := -10
    formationBonus
if bullEngulf
    bullScoreTemp := bullScoreTemp * 1.2
    formationBonus := 5
    formationBonus
if bearEngulf
    bearScoreTemp := bearScoreTemp * 1.2
    formationBonus := -5
    formationBonus
if bullHammer
    bullScoreTemp := bullScoreTemp * 1.1
    formationBonus := 3
    formationBonus
if bearHammer
    bearScoreTemp := bearScoreTemp * 1.1
    formationBonus := -3
    formationBonus
if doji and bullScore > bearScore
    bearScoreTemp := bearScoreTemp + 2
    formationBonus := -2
    formationBonus
if doji and bearScore > bullScore
    bullScoreTemp := bullScoreTemp + 2
    formationBonus := 2
    formationBonus

// Mise à jour des scores principaux avec lissage
bullScore := 0.7 * bullScore + 0.3 * bullScoreTemp
bearScore := 0.7 * bearScore + 0.3 * bearScoreTemp

// ================ NOUVEAU - CALCUL DE LA PENTE DE LA MOYENNE MOBILE ================
// Calcul de la moyenne mobile
ma = ta.sma(close, maPeriod)

// Calcul de la pente en pourcentage
maSlope = 100 * (ma - ma[slopePeriod]) / (ma[slopePeriod] * slopePeriod)

// Déterminer si la pente est suffisamment significative
significantTrend = math.abs(maSlope) >= minAbsSlope

// ================ DÉTECTION DES SWING POINTS ================
// Calcul Swing High/Low
swingHigh = ta.highest(high, swingPeriod)
swingLow = ta.lowest(low, swingPeriod)

// Détection des points de pivot
pivotHighs = ta.pivothigh(high, swingPeriod, swingPeriod)
pivotLows = ta.pivotlow(low, swingPeriod, swingPeriod)

// Conserver les derniers pivots valides
var float lastValidPivotHigh = na
var float lastValidPivotLow = na

if not na(pivotHighs)
    lastValidPivotHigh := pivotHighs
    lastValidPivotHigh
if not na(pivotLows)
    lastValidPivotLow := pivotLows
    lastValidPivotLow

// Si les pivots sont trop anciens, utiliser les récents swing high/low
if na(lastValidPivotHigh) or bar_index - ta.valuewhen(not na(pivotHighs), bar_index, 0) > swingPeriod * 3
    lastValidPivotHigh := swingHigh
    lastValidPivotHigh
if na(lastValidPivotLow) or bar_index - ta.valuewhen(not na(pivotLows), bar_index, 0) > swingPeriod * 3
    lastValidPivotLow := swingLow
    lastValidPivotLow

// ================ CALCUL DU CONTRÔLE DU MARCHÉ ================
// Calculer la différence nette
netScore = bullScore - bearScore + formationBonus

// Conditions pour le contrôle du marché
buyerControl = netScore > 5
sellerControl = netScore < -5
neutral = math.abs(netScore) <= 5

// ================ FILTRES TEMPORELS ================
// Vérification de l'heure de trading
currentTime = time_close(timeframe.period)
currentHour = hour(currentTime, 'UTC+3')
inTradingHours = timeFrameFilter ? currentHour >= startHour and currentHour < endHour : true

// ================ CONDITIONS D'ENTRÉE AVEC NOUVEAU FILTRE DE TENDANCE ================
passTrendFilter = not useMAFilter or significantTrend

// Filtre de tendance basé sur la position du prix par rapport à la MA
aboveMA = close > ma
belowMA = close < ma

// Combinaison des conditions avec filtres de tendance et de pente
longCondition = buyerControl and sellerControl[1] and inTradingHours and passTrendFilter and (not useMACrossFilter or aboveMA)
shortCondition = sellerControl and buyerControl[1] and inTradingHours and passTrendFilter and (not useMACrossFilter or belowMA)

// ================ EXÉCUTION DES ORDRES ================
if longCondition
    // Fermeture de toute position short existante
    strategy.close('Short', comment = 'Signal inversé')

    // Calcul du stop loss et take profit pour long
    stopLossPrice = lastValidPivotLow
    stopDistance = close - stopLossPrice
    takeProfitPrice = close + stopDistance * tpRatio

    // Entrée en position et configuration SL/TP
    strategy.entry('Long', strategy.long)
    strategy.exit('Long TP/SL', 'Long', stop = stopLossPrice, limit = takeProfitPrice)

if shortCondition
    // Fermeture de toute position long existante
    strategy.close('Long', comment = 'Signal inversé')

    // Calcul du stop loss et take profit pour short
    stopLossPrice = lastValidPivotHigh
    stopDistance = stopLossPrice - close
    takeProfitPrice = close - stopDistance * tpRatio

    // Entrée en position et configuration SL/TP
    strategy.entry('Short', strategy.short)
    strategy.exit('Short TP/SL', 'Short', stop = stopLossPrice, limit = takeProfitPrice)

// Fermeture des positions si le signal s'inverse (même sans nouvelle entrée)
if buyerControl and strategy.position_size < 0 or sellerControl and strategy.position_size > 0
    strategy.close_all(comment = 'Signal inversé sans nouvel ordre')

// ================ VISUALISATION ================
// Couleur de fond selon le contrôle du marché
bgcolor(buyerControl ? color.new(color.green, 80) : sellerControl ? color.new(color.red, 80) : color.new(color.gray, 90))

// Flèches pour les signaux d'entrée
plotarrow(longCondition ? 1 : shortCondition ? -1 : 0, title = 'Signaux d\'entrée', colorup = color.green, colordown = color.red, minheight = 15)

// Visualisation des pivots détectés
plotshape(not na(pivotHighs), title = 'Pivot High', location = location.abovebar, color = color.new(color.orange, 0), style = shape.circle, size = size.tiny)
plotshape(not na(pivotLows), title = 'Pivot Low', location = location.belowbar, color = color.new(color.blue, 0), style = shape.circle, size = size.tiny)

// Affichage de la moyenne mobile
plot(ma, title = 'MA', color = significantTrend ? (maSlope > 0 ? color.green : color.red) : color.gray, linewidth = 2)

// Affichage des niveaux de SL/TP pour les positions actuelles
var line currentSL = na
var line currentTP = na

if barstate.islast
    line.delete(currentSL)
    line.delete(currentTP)

    if strategy.position_size != 0
        // Calculer les prix de SL/TP actuels
        float slPrice = na
        float tpPrice = na

        if strategy.position_size > 0 // Long position
            slPrice := lastValidPivotLow
            tpPrice := close + (close - slPrice) * tpRatio
            tpPrice
        else // Short position
            slPrice := lastValidPivotHigh
            tpPrice := close - (slPrice - close) * tpRatio
            tpPrice

        // Dessiner les lignes de SL/TP
        currentSL := line.new(bar_index - 20, slPrice, bar_index + 5, slPrice, color = color.red, width = 2, style = line.style_dashed)
        currentTP := line.new(bar_index - 20, tpPrice, bar_index + 5, tpPrice, color = color.green, width = 2, style = line.style_dashed)

        line.set_extend(currentSL, extend.right)
        line.set_extend(currentTP, extend.right)

// ================ TABLEAUX D'INFORMATION ================
// Tableau des scores
if barstate.islast
    var table scoreTable = table.new(position.top_right, 5, 5) // Une ligne de plus pour les filtres
    table.cell(scoreTable, 0, 0, 'Acheteurs', text_color = color.green, bgcolor = color.new(color.green, 90))
    table.cell(scoreTable, 1, 0, 'Vendeurs', text_color = color.red, bgcolor = color.new(color.red, 90))
    table.cell(scoreTable, 2, 0, 'Net', text_color = color.white, bgcolor = color.new(color.gray, 90))
    table.cell(scoreTable, 3, 0, 'SL', text_color = color.red, bgcolor = color.new(color.red, 90))
    table.cell(scoreTable, 4, 0, 'TP', text_color = color.green, bgcolor = color.new(color.green, 90))

    table.cell(scoreTable, 0, 1, str.tostring(math.round(bullScore, 1)), text_color = color.green)
    table.cell(scoreTable, 1, 1, str.tostring(math.round(bearScore, 1)), text_color = color.red)
    table.cell(scoreTable, 2, 1, str.tostring(math.round(netScore, 1)), text_color = netScore > 0 ? color.green : netScore < 0 ? color.red : color.gray)

    // Afficher la pente de la MA et son statut
    table.cell(scoreTable, 0, 3, 'Pente MA:', text_color = color.white)
    table.cell(scoreTable, 1, 3, str.tostring(math.round(maSlope, 2)) + '%', 
              text_color = significantTrend ? (maSlope > 0 ? color.green : color.red) : color.gray)
    table.cell(scoreTable, 2, 3, significantTrend ? 'VALIDE' : 'RANGE', 
              text_color = significantTrend ? color.green : color.orange)
              
    // Afficher la position du prix par rapport à la MA
    table.cell(scoreTable, 0, 4, 'Prix/MA:', text_color = color.white)
    table.cell(scoreTable, 1, 4, aboveMA ? 'AU-DESSUS' : 'EN-DESSOUS', 
              text_color = aboveMA ? color.green : color.red)
    table.cell(scoreTable, 2, 4, useMACrossFilter ? 'ACTIVÉ' : 'DÉSACTIVÉ', 
              text_color = useMACrossFilter ? color.green : color.gray)

    // Ajouter les niveaux actuels de SL/TP à la table
    if strategy.position_size > 0 // Long position
        slPrice = lastValidPivotLow
        tpPrice = close + (close - slPrice) * tpRatio
        table.cell(scoreTable, 3, 1, str.tostring(math.round(slPrice, 2)), text_color = color.red)
        table.cell(scoreTable, 4, 1, str.tostring(math.round(tpPrice, 2)), text_color = color.green)
        table.cell(scoreTable, 0, 2, 'POSITION:', text_color = color.white)
        table.cell(scoreTable, 1, 2, 'LONG', text_color = color.green)
    else if strategy.position_size < 0 // Short position
        slPrice = lastValidPivotHigh
        tpPrice = close - (slPrice - close) * tpRatio
        table.cell(scoreTable, 3, 1, str.tostring(math.round(slPrice, 2)), text_color = color.red)
        table.cell(scoreTable, 4, 1, str.tostring(math.round(tpPrice, 2)), text_color = color.green)
        table.cell(scoreTable, 0, 2, 'POSITION:', text_color = color.white)
        table.cell(scoreTable, 1, 2, 'SHORT', text_color = color.red)
    else
        table.cell(scoreTable, 3, 1, 'N/A', text_color = color.gray)
        table.cell(scoreTable, 4, 1, 'N/A', text_color = color.gray)
        table.cell(scoreTable, 0, 2, 'POSITION:', text_color = color.white)
        table.cell(scoreTable, 1, 2, 'AUCUNE', text_color = color.gray)

// Tableau d'information sur les heures de trading
if barstate.islast
    var table timeTable = table.new(position.bottom_right, 2, 1)
    table.cell(timeTable, 0, 0, 'Heure actuelle (UTC+3): ' + str.tostring(currentHour), text_color = color.white)
    table.cell(timeTable, 1, 0, 'Trading: ' + (inTradingHours ? 'ACTIF' : 'INACTIF'), text_color = inTradingHours ? color.green : color.red)

// Labels pour les formations importantes
if threeSoldiers
    label.new(bar_index, high, '3 Soldats', color = color.green, style = label.style_label_down, textcolor = color.white, size = size.small)
if threeCrows
    label.new(bar_index, low, '3 Corbeaux', color = color.red, style = label.style_label_up, textcolor = color.white, size = size.small)
if bullEngulf
    label.new(bar_index, low, 'Englobant ↑', color = color.green, style = label.style_label_up, textcolor = color.white, size = size.small)
if bearEngulf
    label.new(bar_index, high, 'Englobant ↓', color = color.red, style = label.style_label_down, textcolor = color.white, size = size.small)

// ================ ALERTES ================
alertcondition(longCondition, 'Signal d\'achat', 'MarketControl: Acheteurs prennent le contrôle')
alertcondition(shortCondition, 'Signal de vente', 'MarketControl: Vendeurs prennent le contrôle')
alertcondition(strategy.position_size != strategy.position_size[1], 'Changement de position', 'MarketControl: Position modifiée')
